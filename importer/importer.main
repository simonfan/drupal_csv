<?php

/**
 * @file
 * Importer form steps.
 * Everything derived from the drupal examples module.
 */

/**
 * Extensible wizard form example.
 *
 * This is an example of a multistep form using a wizard style. It will include
 * the 'Previous' and 'Next' buttons when required, and a 'Finish' button at the
 * last stage of the form submission.
 *
 * This example is an extensible skeleton that can include (even
 * programatically) more steps. The demonstration form includes three steps,
 * each step having its own validation functions.
 *
 * How to extend this example:
 * - Steps are defined in the _form_example_steps() function. Include or alter
 *   the steps as you require.
 * - For each step, implement the corresponding 'form' function (see
 *   'importer_personal_info' for the first step in this example.)
 *   Each step is a regular form, and the wizard collects all the values of the
 *   included forms.
 * - Optionally, you may include custom validation functions using the regular
 *   validation hook (formname_validate). The wizard uses these validation
 *   functions for each step.
 * - The most important customization step is to change the submit handler and
 *   do whatever you want with the collected information. In this case, the
 *   example just shows the collected values in the various steps.
 * @ingroup form_example
 */

/**
 * Returns the list of steps and their associated forms. This has been separated
 * to clarify and easy the understanding of this example. You should edit this
 * function to include the steps your wizard/multistep form requires.
 *
 * @return $array
 *
 * @ingroup form_example
 */
function _csv_importer_steps() {
  return array(
      1 => array(
        // uses csv.common.inc
        'title' => 'Choose the Entity Type you wish to import',
        'form' => 'csv_common_entity_type_selector',

        'expected_values' => array('entity_type'),

        'file' => 'csv.common.inc',
      ),
      2 => array(
        // uses csv.common.inc
        'title' => 'Choose the Entity Type Bundle you wish to import',
        'form' => 'csv_common_entity_bundle_selector',

        'expected_values' => array('entity_bundle'),

        'file' => 'csv.common.inc',
      ),

      3 => array(
        'title' => 'Upload the .csv file and set its options.',
        'form' => 'csv_importer_file',

        'expected_values' => array(
          'file',
          'csv_has_column_names',
          'csv_delimiter',
          'csv_enclosure',
          'temp_file_base_path'
        ),

        'file' => 'importer/importer.3.file',
      ),
      4 => array(
        'title' => 'Map the columns from the .csv file to the corresponding node properties and fields.',
        'form' => 'csv_importer_map_fields',

        'expected_values' => array(
          'csv_col_names',
          'csv_map',
          'identifier_field_name',
        ),

        'file' => 'importer/importer.4.map_fields',
      ),
      5 => array(
        'title' => 'Confirm field mapping and other import information',
        'form' => 'csv_importer_confirm_data',

        'expected_values' => array(), // no values are expected from here. this is just a confirmation step.

        'file' => 'importer/importer.5.confirm_data',
      ),
      6 => array(
        'title' => 'Verify results and authorize updates',
        'form' => 'csv_importer_loop_csv',

        'expected_values' => array('final_confirm'),

        'file' => 'importer/importer.6.loop_csv',
      ),
      7 => array(
        'title' => 'Creations and updates made',
        'form' => 'csv_importer_loop_csv',

        'expected_values' => array(),

        'file' => 'importer/importer.6.loop_csv',
      ),
    );
}


/**
 * A function used to save all form values in a single array
 */
function _csv_importer_get_form_values($form_state) {
  $step_infos = _csv_importer_steps();
  $step_datas = $form_state['step_information'];

  $steps = array_keys($step_infos);

  // unify all the collected information.
  $info = array();

  foreach ($steps as $step) {

    $stp_data = isset($step_datas[$step]['stored_values']) ? $step_datas[$step]['stored_values'] : FALSE;
    $stp_expected_values = $step_infos[$step]['expected_values'];

    // only try to get the info if the step's stored values are ready.
    if ($stp_data && count($stp_expected_values) > 0) {

      foreach ($stp_expected_values as $key => $vname) {
        
        // try to get this information from the step_data
        if (isset($stp_data[$vname])) {

          $info[$vname] = $stp_data[$vname];

        }

      }

    } else {
      continue;
    }

  }

  return $info;
}




/**
 * The primary formbuilder function for the wizard form. This is the form that
 * you should call with drupal_get_form() from your code, and it will include
 * the rest of the step forms defined. You are not required to change this
 * function, as this will handle all the step actions for you.
 *
 * This form has two defined submit handlers to process the different steps:
 *  - Previous: handles the way to get back one step in the wizard.
 *  - Next:     handles each step form submission,
 *
 * The third handler, the finish button handler, is the default form _submit
 * handler used to process the information.
 *
 * You are not required to change the next or previous handlers, but you must
 * change the importer_sbumit handler to perform the operations you
 * need on the collected information.
 *
 * @ingroup form_example
 */
function csv_importer($form, &$form_state) {

  // Initialize a description of the steps for the wizard.
  if (empty($form_state['step'])) {
    $form_state['step'] = 1;

    // This array contains the function to be called at each step to get the
    // relevant form elements. It will also store state information for each
    // step.
    $form_state['step_information'] = _csv_importer_steps();
  }
  $step = &$form_state['step'];
  $step_title = $form_state['step_information'][$step]['title'];

  drupal_set_title(t('Step @step: @title', array('@step' => $step, '@title' => $step_title )));

  //////////////////////////////////////////////
  ///////////////// CUSTOMIZED! ////////////////
  //////////////////////////////////////////////

  // Require the file that holds the step function.
  $path_to_mod = drupal_get_path('module', 'csv');

  // always require common.inc
  require_once($path_to_mod .'/csv.common.inc');

  // require form step specific file
  if ( isset($form_state['step_information'][$step]['file']) ) {
    require_once( $path_to_mod .'/'. $form_state['step_information'][$step]['file'] );
  }


  //////////////////////////////////////////////
  ///////////////// CUSTOMIZED! ////////////////
  //////////////////////////////////////////////


  // build a object with all form values
  $form_values = _csv_importer_get_form_values($form_state);
  
  // Call the function named in $form_state['step_information'] to get the
  // form elements to display for this step.
  $form = $form_state['step_information'][$step]['form']($form, $form_state, $form_values);

  // Show the 'previous' button if appropriate. Note that #submit is set to
  // a special submit handler, and that we use #limit_validation_errors to
  // skip all complaints about validation when using the back button. The
  // values entered will be discarded, but they will not be validated, which
  // would be annoying in a "back" button.
  if ($step > 1) {
    $form['prev'] = array(
      '#type' => 'submit',
      '#value' => t('Previous'),
      '#name' => 'prev',
      '#submit' => array('csv_importer_previous_submit'),
      '#limit_validation_errors' => array(),
    );
  }

  // Show the Next button only if there are more steps defined.
  if ($step < count($form_state['step_information'])) {
    // The Next button should be included on every step
    $form['next'] = array(
      '#type' => 'submit',
      '#value' => t('Next'),
      '#name' => 'next',
      '#submit' => array('csv_importer_next_submit'),
    );
  }
  else {
    // Just in case there are no more steps, we use the default submit handler
    // of the form wizard. Call this button Finish, Submit, or whatever you
    // want to show. When this button is clicked, the
    // csv_importer_submit handler will be called.
    $form['finish'] = array(
      '#type' => 'submit',
      '#value' => t('Finish'),
    );
  }

  // Include each validation function defined for the different steps.
  if (function_exists($form_state['step_information'][$step]['form'] . '_validate')) {
    $form['next']['#validate'] = array($form_state['step_information'][$step]['form'] . '_validate');
  }

  return $form;
}

/**
 * Submit handler for the "previous" button.
 * - Stores away $form_state['values']
 * - Decrements the step counter
 * - Replaces $form_state['values'] with the values from the previous state.
 * - Forces form rebuild.
 *
 * You are not required to change this function.
 *
 * @ingroup form_example
 */
function csv_importer_previous_submit($form, &$form_state) {
  $current_step = &$form_state['step'];
  $form_state['step_information'][$current_step]['stored_values'] = $form_state['values'];
  if ($current_step > 1) {
    $current_step--;
    $form_state['values'] = $form_state['step_information'][$current_step]['stored_values'];
  }
  $form_state['rebuild'] = TRUE;
}

/**
 * Submit handler for the 'next' button.
 * - Saves away $form_state['values']
 * - Increments the step count.
 * - Replace $form_state['values'] from the last time we were at this page
 *   or with array() if we haven't been here before.
 * - Force form rebuild.
 *
 * You are not required to change this function.
 *
 * @param $form
 * @param $form_state
 *
 * @ingroup form_example
 */
function csv_importer_next_submit($form, &$form_state) {
  $current_step = &$form_state['step'];
  $form_state['step_information'][$current_step]['stored_values'] = $form_state['values'];


  if ($current_step < count($form_state['step_information'])) {
    $current_step++;
    if (!empty($form_state['step_information'][$current_step]['stored_values'])) {
      $form_state['values'] = $form_state['step_information'][$current_step]['stored_values'];
    }
    else {
      $form_state['values'] = array();
    }
    $form_state['rebuild'] = TRUE;  // Force rebuild with next step.
    return;
  }
}

/**
 * The previous code was a 'skeleton' of a multistep wizard form. You are not
 * required to change a line on the previous code (apart from defining your own
 * steps in the _form_example_steps() function.
 *
 * All the code included from here is the content of the wizard, the steps of
 * the form.
 *
 * First, let's show the defined steps for the wizard example.
 * @ingroup form_example
 */







// And now comes the magic of the wizard, the function that should handle all the
// inputs from the user on each different step.
/**
 * Wizard form submit handler.
 * - Saves away $form_state['values']
 * - Process all the form values.
 *
 * This demonstration handler just do a drupal_set_message() with the information
 * collected on each different step of the wizard.
 *
 * @param $form
 * @param $form_state
 *
 * @ingroup form_example
 */
function csv_importer_submit($form, &$form_state) {
  $current_step = &$form_state['step'];
  $form_state['step_information'][$current_step]['stored_values'] = $form_state['values'];

  // In this case we've completed the final page of the wizard, so process the
  // submitted information.
  drupal_set_message(t('This information was collected by this wizard:'));
  foreach ($form_state['step_information'] as $index => $value) {
    // Remove FAPI fields included in the values (form_token, form_id and form_build_id
    // This is not required, you may access the values using $value['stored_values']
    // but I'm removing them to make a more clear representation of the collected
    // information as the complete array will be passed through drupal_set_message().
    unset($value['stored_values']['form_id']);
    unset($value['stored_values']['form_build_id']);
    unset($value['stored_values']['form_token']);

    // Now show all the values.
    drupal_set_message(t('Step @num collected the following values: <pre>@result</pre>', array('@num' => $index, '@result' => print_r($value['stored_values'], TRUE))));
  }

  drupal_goto('admin/csv/import/end');
}






////////////////////////////////////////////////////////
//////////////// HELPERS ///////////////////////////////
////////////////////////////////////////////////////////